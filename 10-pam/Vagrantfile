# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
config.vbguest.auto_update = false

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  vb.memory = "1024"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     
mkdir -p ~root/.ssh
cp ~vagrant/.ssh/auth* ~root/.ssh

# Отключаем временно SELinux
echo 0 > /etc/selinux/enforce

# Синхронизируем время, чтобы оно было точным:
yum install -y ntp ntpdate wget
ntpdate 1.ru.pool.ntp.org

# Создадим тестовых пользователей:
adduser alexey && echo 1234 | passwd alexey --stdin
adduser john && echo 1234 | passwd john --stdin
adduser jim && echo 1234 | passwd jim --stdin
adduser bob && echo 1234 | passwd bob --stdin

###################################################################################
# Разрешить в выходной день/праздники доступ только пользователям из группы admin #
####################################################################################

# Создадим группу admin и добавим в нее пользователей: root, alexey, john
# Им будет разрешен доступ на сервер в выходные дни/праздники.
groupadd admin 
usermod -g admin root 
usermod -g admin alexey 
usermod -g admin john 

# Скачаем конфиг, в котором указываются праздничные дни в формате holiday: дд.мм.гг
# Файл будет считывать скрипт.
cd /etc/security
curl -L -o holidays.conf "https://drive.google.com/uc?export=download&id=1XEX2UbVJAVRUlF_KsPCEquASzItWl4WN"
# для проверки блокировки сразу укажем, что текущий день - праздник
echo ""  >> /etc/security/holidays.conf
echo "holiday: $(date +%d-%m-%y)"  >> /etc/security/holidays.conf
echo ""  >> /etc/security/holidays.conf

# Скачаем скрипт login_script.sh, который будет запускаться при аутентификации пользователя
cd /etc/security
curl -L -o login_script.sh "https://drive.google.com/uc?export=download&id=1cdwQXau50f_KfEI12dQOo4ar-R2yZjjc"
chmod +x /etc/security/login_script.sh

# добавим в конфиг /etc/pam.d/system-auth модуль pam_exec.so:
# auth        required      pam_exec.so stdout /etc/pam-script.d/login_script.sh 
# модуль pam_exec будет запускать скрипт login_script.sh при аутентификации пользователя при локальном входе
sed -i '4i auth       required     pam_exec.so stdout /etc/security/login_script.sh' /etc/pam.d/system-auth

# добавим в конфиг /etc/pam.d/sshd модуль pam_exec.so:
# auth        required      pam_exec.so stdout /etc/pam-script.d/login_script.sh 
# модуль pam_exec будет запускать скрипт login_script.sh при аутентификации пользователя на ssh-сервере
sed -i '2i auth       required     pam_exec.so stdout /etc/security/login_script.sh' /etc/pam.d/sshd

# Добавим в конфиг /etc/pam.d/su модуль pam_cap.so:
# auth       required     pam_cap.so
# модуль pam_cap.so понадобится для использования капабилити
sed -i '2i auth       optional     pam_cap.so' /etc/pam.d/su

# Отредактируем настройки /etc/ssh/sshd_config - разрешим доступ по паролю и перечитаем конфиг
# sed -i '47s/^/#/' /etc/ssh/sshd_config
sed -i '65s/^/#/' /etc/ssh/sshd_config
sed -i '66i PasswordAuthentication yes' /etc/ssh/sshd_config
systemctl reload sshd

#######################################################################
# Даем расширенные права пользователю, с которыми можно сделать root #
#######################################################################
 
# Создаем файл /etc/security/capability.conf, который считывает модуль pam_cap
# И добавляем набор капабилитис пользователю john:
cat << EOF >> /etc/security/capability.conf
cap_sys_admin,cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_ipc_lock,cap_net_admin,cap_setuid,cap_setgid john 
* none 
EOF

# Добавляем атрибут CAP_DAC_OVERRIDE для исполняемого файла /bin/vi:
# e - Effective (the caps that this process actually has)
# i - Inheritable (the caps that this process can pass to a child process)
sudo setcap 'CAP_DAC_OVERRIDE+ei' /bin/vi


SHELL


end


